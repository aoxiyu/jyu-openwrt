name: 编译OpenWrt固件(Lean_x86_64)

on:
  workflow_dispatch:
    inputs:
      CACHE_BUILD:
        description: '缓存加速'
        required: false
        default: 'false'
        type: boolean
      SSH_ACTION:
        description: 'SSH远程配置固件'
        required: false
        default: 'false'
        type: boolean
      CLEAN_CACHE:
        description: '清理编译缓存'
        required: false
        default: 'false'
        type: boolean
  schedule:
    - cron: '0 19 * * 3'  # 每周三UTC时间19点（北京时间周四凌晨3点）执行

env:
  TZ: Asia/Shanghai
  MY_GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}
  TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
  TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
  GITHUB_RELEASE: https://github.com/aoxijy/aoxi-openwrt/releases

jobs:
  build:
    runs-on: ubuntu-22.04
    if: github.event.repository.owner.id == github.event.sender.id || !github.event.sender.id

    name: 编译 Lean_x86_64
    strategy:
      fail-fast: false
      matrix:
        target: ["Lean_x86_64"]

    steps:
    # ... 前面的步骤保持不变 ...

    - name: 检查编译输出文件
      if: success()
      run: |
        echo "检查编译输出目录内容..."
        find /github-builder/openwrt/bin -type f -name "*.img*" -o -name "*.bin" | head -20
        echo "固件文件列表:"
        find /github-builder/openwrt/bin/targets -type f \( -name "*.img*" -o -name "*.bin" \) 2>/dev/null || echo "未找到固件文件"

    # 添加的卸载ksmbd步骤
    - name: 卸载ksmbd相关包
      if: success()
      run: |
        cd /github-builder/openwrt
        echo "正在卸载ksmbd-server和luci-app-ksmbd..."
        
        # 确保卸载脚本可执行
        chmod +x files/etc/uci-defaults/99-remove_ksmbd
        
        # 执行卸载操作
        ./staging_dir/host/bin/fakeroot ./scripts/config/conf --defconfig=.config Config.in
        make -j1 package/ksmbd-server/compile
        make -j1 package/luci-app-ksmbd/compile
        make -j1 package/ksmbd-server/clean
        make -j1 package/luci-app-ksmbd/clean
        
        # 从文件系统中移除相关文件
        rm -rf build_dir/target-*/root-*/usr/lib/opkg/info/ksmbd-server.*
        rm -rf build_dir/target-*/root-*/usr/lib/opkg/info/luci-app-ksmbd.*
        rm -rf build_dir/target-*/root-*/etc/config/ksmbd
        rm -rf build_dir/target-*/root-*/usr/share/luci/menu.d/luci-app-ksmbd.json
        
        echo "ksmbd卸载完成"

    - name: 整理固件文件
      if: success()
      id: organizer
      run: |
        mkdir -p ${GITHUB_WORKSPACE}/artifact/firmware
        mkdir -p ${GITHUB_WORKSPACE}/artifact/buildinfo
        
        echo "查找固件文件..."
        # 查找所有固件文件
        FIRMWARE_FILES=$(find /github-builder/openwrt/bin/targets -type f \( -name "*.img*" -o -name "*.bin" -o -name "*.gz" \) 2>/dev/null || true)
        
        if [ -n "$FIRMWARE_FILES" ]; then
          echo "找到固件文件:"
          echo "$FIRMWARE_FILES"
          # 复制固件文件
          echo "$FIRMWARE_FILES" | while read -r file; do
            cp -v "$file" ${GITHUB_WORKSPACE}/artifact/firmware/
          done
        else
          echo "警告: 未找到任何固件文件"
          # 尝试其他可能的位置
          find /github-builder/openwrt/bin -type f \( -name "*.img*" -o -name "*.bin" -o -name "*.gz" \) -exec cp -v {} ${GITHUB_WORKSPACE}/artifact/firmware/ \; 2>/dev/null || true
        fi
        
        # 复制配置文件
        cp -f /github-builder/openwrt/.config ${GITHUB_WORKSPACE}/artifact/buildinfo/${{matrix.target}}.config 2>/dev/null || true
        
        # 复制buildinfo和manifest文件
        find /github-builder/openwrt/bin/targets -name "*.buildinfo" -o -name "*.manifest" -exec cp -v {} ${GITHUB_WORKSPACE}/artifact/buildinfo/ \; 2>/dev/null || true
        
        # 显示最终复制的文件
        echo "最终artifact目录内容:"
        ls -la ${GITHUB_WORKSPACE}/artifact/firmware/ || echo "firmware目录为空"
        ls -la ${GITHUB_WORKSPACE}/artifact/buildinfo/ || echo "buildinfo目录为空"
        
        # 计算编译时间
        START_SECONDS=${{ env.START_SECONDS }}
        END_TIME=`date +'%Y-%m-%d %H:%M:%S'`
        END_SECONDS=$(date --date="$END_TIME" +%s)
        SECONDS=$((END_SECONDS-START_SECONDS))
        HOUR=$((SECONDS/3600))
        MIN=$(( (SECONDS-HOUR*3600)/60 ))
        SEC=$((SECONDS-HOUR*3600-MIN*60))
        echo "BUILD_TIME=${HOUR}时${MIN}分${SEC}秒" >> $GITHUB_ENV
        echo "编译用时: ${HOUR}时${MIN}分${SEC}秒"

    - name: 上传固件文件
      if: steps.compile.outcome == 'success' && env.UPLOAD_FIRMWARE == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: ${{matrix.target}}_OpenWrt_firmware_${{ env.FILE_TIME }}
        path: ${GITHUB_WORKSPACE}/artifact/firmware/*

    - name: 上传编译日志
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: build_log_${{ github.run_id }}
        path: /github-builder/openwrt/build.log

    - name: 上传固件信息
      if: steps.compile.outcome == 'success' && env.UPLOAD_CONFIG == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: ${{matrix.target}}_OpenWrt_buildinfo_${{ env.FILE_TIME }}
        path: ${GITHUB_WORKSPACE}/artifact/buildinfo/*

    - name: 自动发布固件到 Releases
      uses: ncipollo/release-action@v1
      if: steps.compile.outcome == 'success' && env.UPLOAD_RELEASE == 'true'
      with:
        name: ${{ env.FILE_TIME1 }} 「 ${{ env.FIRMWARE_MESSAGE }} 」
        tag: ${{ env.FILE_TIME2 }}-${{matrix.target}}
        artifacts: ${GITHUB_WORKSPACE}/artifact/firmware/*
        body: |
          ★ 源码: ${{ env.REPO_URL }}
          ★ 分支: ${{ env.REPO_BRANCH }}
          ★ 感谢源码作者无私分享！

          🖥 内核版本: ${{ env.KERNEL_PATCHVER }}

          🎈 编译时间: ${{ env.FILE_TIME1 }}

          ⏰ 编译用时: ${{ env.BUILD_TIME }}

          🎉 [ ${{ env.FIRMWARE_MESSAGE }} ]固件下载

          ━━━━━━━━━━━━━━━━━━━━

          =========================================
        token: ${{ secrets.MY_GITHUB_TOKEN }}

    - name: 删除运行记录
      if: success()
      uses: Mattraks/delete-workflow-runs@v2
      with:
        token: ${{ secrets.MY_GITHUB_TOKEN }}
        repository: ${{ github.repository }}
        retain_days: 30
        keep_minimum_runs: 5

    - name: 删除自动发布的旧固件
      if: steps.compile.outcome == 'success' && env.UPLOAD_RELEASE == 'true'
      uses: dev-drprasad/delete-older-releases@v0.2.0
      with:
        keep_latest: 10
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}

    - name: 编译成功信息通知-Telegram
      if: steps.compile.outcome == 'success' && env.TELEGRAM_BOT == 'true'
      run: |
        curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
          -d chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" \
          -d text="您的${{ env.FIRMWARE_MESSAGE }}固件成功编译完成了！

        🖥 内核版本: ${{ env.KERNEL_PATCHVER }}
        🎈 编译时间: ${{ env.FILE_TIME1 }}
        ⏰ 编译用时: ${{ env.BUILD_TIME }}
        🎉 发布地址: ${{ env.GITHUB_RELEASE }}

        🌴 固件已经编译完成 🎈！！！" \
          >/dev/null 2>&1 && echo "Telegram通知发送成功"
