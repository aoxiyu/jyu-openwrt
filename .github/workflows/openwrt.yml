name: 编译OpenWrt固件(Lean_x86_64)

on:
  workflow_dispatch:
    inputs:
      CACHE_BUILD:
        description: '缓存加速'
        required: false
        default: 'false'
        type: boolean
      SSH_ACTION:
        description: 'SSH远程配置固件'
        required: false
        default: 'false'
        type: boolean
      CLEAN_CACHE:
        description: '清理编译缓存'
        required: false
        default: 'false'
        type: boolean
  schedule:
    - cron: '0 19 * * *'  # 每天UTC时间19点（北京时间凌晨3点）执行

env:
  TZ: Asia/Shanghai
  MY_GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}
  TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
  TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
  GITHUB_RELEASE: https://github.com/aoxijy/aoxi-openwrt/releases

jobs:
  build:
    runs-on: ubuntu-22.04
    if: github.event.repository.owner.id == github.event.sender.id || !github.event.sender.id

    name: 编译 Lean_x86_64
    strategy:
      fail-fast: false
      matrix:
        target: ["Lean_x86_64"]

    steps:
    - name: Checkout 仓库
      uses: actions/checkout@v4
      with:
        fetch-depth: 1

    - name: 检测脚本设置
      run: |
        if [ -f "${GITHUB_WORKSPACE}/build/${{matrix.target}}/settings.ini" ]; then
          source "${GITHUB_WORKSPACE}/build/${{matrix.target}}/settings.ini"
          echo "REPO_URL=${REPO_URL}" >> $GITHUB_ENV
          echo "REPO_BRANCH=${REPO_BRANCH}" >> $GITHUB_ENV
          echo "CONFIG_FILE=${CONFIG_FILE}" >> $GITHUB_ENV
          echo "FIRMWARE_MESSAGE=${FIRMWARE_MESSAGE}" >> $GITHUB_ENV
          echo "CUSTOM_SH=${CUSTOM_SH}" >> $GITHUB_ENV
          echo "CACHE_BUILD=${CACHE_BUILD}" >> $GITHUB_ENV
          echo "SSH_ACTIONS=${SSH_ACTIONS}" >> $GITHUB_ENV
          echo "UPLOAD_FIRMWARE=${UPLOAD_FIRMWARE}" >> $GITHUB_ENV
          echo "UPLOAD_CONFIG=${UPLOAD_CONFIG}" >> $GITHUB_ENV
          echo "UPLOAD_RELEASE=${UPLOAD_RELEASE}" >> $GITHUB_ENV
          echo "TELEGRAM_BOT=${TELEGRAM_BOT}" >> $GITHUB_ENV
        else
          # 默认设置
          echo "REPO_URL=https://github.com/coolsnowwolf/lede" >> $GITHUB_ENV
          echo "REPO_BRANCH=master" >> $GITHUB_ENV
          echo "CONFIG_FILE=.config" >> $GITHUB_ENV
          echo "FIRMWARE_MESSAGE=Lean_OpenWrt" >> $GITHUB_ENV
          echo "CUSTOM_SH=custom.sh" >> $GITHUB_ENV
          echo "CACHE_BUILD=false" >> $GITHUB_ENV
          echo "SSH_ACTIONS=false" >> $GITHUB_ENV
          echo "UPLOAD_FIRMWARE=true" >> $GITHUB_ENV
          echo "UPLOAD_CONFIG=true" >> $GITHUB_ENV
          echo "UPLOAD_RELEASE=true" >> $GITHUB_ENV
          echo "TELEGRAM_BOT=false" >> $GITHUB_ENV
        fi
        echo "HOME=${GITHUB_WORKSPACE}/openwrt" >> $GITHUB_ENV
        echo "WORKPATH=${GITHUB_WORKSPACE}/build/${{matrix.target}}" >> $GITHUB_ENV

    - name: 清理编译缓存（如需要）
      if: github.event.inputs.CLEAN_CACHE == 'true'
      run: |
        echo "正在强制清理编译缓存..."
        sudo rm -rf /github-builder/openwrt
        sudo rm -rf $GITHUB_WORKSPACE/openwrt
        echo "编译缓存已清理"

    - name: 初始化系统环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo -E rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d /usr/local/lib/android
        sudo -E apt-mark hold grub-efi-amd64-signed
        sudo -E apt update -y
        sudo -E apt -y purge azure-cli* docker* ghc* zulu* llvm* firefox google* dotnet* powershell* openjdk* mysql* php* mongodb* dotnet* snap* || true
        sudo -E apt full-upgrade -y
        sudo -E apt install -y ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \
                   bzip2 ccache clang cmake cpio curl device-tree-compiler ecj flex gawk gcc-multilib \
                   g++-multilib git gnutls-dev gperf haveged help2man intltool lib32gcc-s1 libc6-i386 libelf-dev \
                   libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses-dev \
                   libreadline-dev libssl-dev libpython3-dev libtool libyaml-dev libz-dev lld llvm lrzsz msmtp \
                   ninja-build p7zip p7zip-full patch pkgconf python3 python3 python3-ply python3-docutils \
                   python3-pyelftools qemu-utils re2c rsync scons squashfs-tools subversion swig texinfo uglifyjs \
                   upx-ucl unzip vim wget xmlto xxd zlib1g-dev zstd libfuse-dev gettext genisoimage python3-setuptools || true
        sudo -E systemctl daemon-reload
        sudo -E apt -y autoremove --purge
        sudo -E apt clean

    - name: 编译前准备
      run: |
        sudo -E apt-get -y install xsltproc zip grep python3-pip python3-ply libc6-dev libtinfo-dev libtinfo5 ncurses-doc \
                    python2 git-core wget curl rsync dos2unix fakeroot jq libc6-dev-i386 libncurses5-dev libncursesw5 \
                    libncursesw5-dev quilt python3-distutils file g++ || true
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir
        sudo timedatectl set-timezone "$TZ"
        echo
        echo "系统空间信息:"
        df -hT $PWD

    - name: 释放Ubuntu磁盘空间
      uses: jlumbroso/free-disk-space@main
      with:
        tool-cache: true
        android: true
        dotnet: true
        haskell: true
        large-packages: true
        docker-images: true
        swap-storage: true

    - name: 创建模拟物理磁盘
      run: |
        mnt_size=$(expr $(df -h /mnt | tail -1 | awk '{print $4}' | sed 's/[[:alpha:]]//g' | sed 's/\..*//') - 1)
        root_size=$(expr $(df -h / | tail -1 | awk '{print $4}' | sed 's/[[:alpha:]]//g' | sed 's/\..*//') - 4)
        sudo truncate -s "${mnt_size}"G /mnt/mnt.img
        sudo truncate -s "${root_size}"G /root.img
        sudo losetup /dev/loop6 /mnt/mnt.img
        sudo losetup /dev/loop7 /root.img
        sudo pvcreate /dev/loop6
        sudo pvcreate /dev/loop7
        sudo vgcreate github /dev/loop6 /dev/loop7
        sudo lvcreate -n runner -l 100%FREE github
        sudo mkfs.xfs /dev/github/runner
        sudo mkdir -p /github-builder
        sudo mount /dev/github/runner /github-builder
        sudo chown -R $USER:$GROUPS /github-builder
        df -Th

    - name: 下载OpenWrt源码
      working-directory: /github-builder
      run: |
        df -hT $PWD
        git clone -b $REPO_BRANCH --single-branch $REPO_URL openwrt
        ln -sf /github-builder/openwrt $GITHUB_WORKSPACE/openwrt

    - name: 缓存加速
      uses: actions/cache@v3
      if: env.CACHE_BUILD == 'true' || github.event.inputs.CACHE_BUILD == 'true'
      with:
        path: |
          /github-builder/openwrt/dl
          /github-builder/openwrt/ccache
        key: ${{ runner.os }}-openwrt-${{ hashFiles('build/**/settings.ini') }}
        restore-keys: |
          ${{ runner.os }}-openwrt-

    - name: 更新时区、编译时间
      id: date
      run: |
        sudo timedatectl set-timezone "$TZ"
        echo "FILE_TIME=$(date +"%m-%d %H.%M")" >> $GITHUB_ENV
        echo "FILE_TIME1=$(date "+%Y年%m月%d日-%H点%M分")" >> $GITHUB_ENV
        echo "FILE_TIME2=$(date "+%Y%m%d-%H%M")" >> $GITHUB_ENV
        echo "编译开始时间..."
        START_TIME=`date +'%Y-%m-%d %H:%M:%S'`
        echo "START_SECONDS=$(date --date="$START_TIME" +%s)" >> $GITHUB_ENV

    - name: 加载源,定制文件并生成自定义配置
      run: |
        # 复制配置文件到源码目录
        cp -Rf ${GITHUB_WORKSPACE}/build/* /github-builder/openwrt/build/ 2>/dev/null || true
        cd /github-builder/openwrt

        echo "执行自定义脚本..."
        if [ -f "${GITHUB_WORKSPACE}/build/${{matrix.target}}/$CUSTOM_SH" ]; then
          chmod +x "${GITHUB_WORKSPACE}/build/${{matrix.target}}/$CUSTOM_SH"
          export WORKPATH="${GITHUB_WORKSPACE}/build/${{matrix.target}}"
          /bin/bash "${GITHUB_WORKSPACE}/build/${{matrix.target}}/$CUSTOM_SH"
        else
          echo "警告: 未找到自定义脚本 ${GITHUB_WORKSPACE}/build/${{matrix.target}}/$CUSTOM_SH"
        fi

        echo "复制配置文件..."
        # 复制sources/etc下的配置文件到files/etc
        if [ -d "${GITHUB_WORKSPACE}/build/${{matrix.target}}/sources/etc" ]; then
          mkdir -p files/etc
          cp -rf "${GITHUB_WORKSPACE}/build/${{matrix.target}}/sources/etc/"* files/etc/ 2>/dev/null || true
          echo "自定义配置文件已复制到files/etc/"
          echo "复制的文件:"
          find files/etc -type f | head -10
        else
          echo "警告: 未找到sources/etc目录"
        fi

        # 复制其他配置文件
        if [ -n "$(ls -A "${GITHUB_WORKSPACE}/build/${{matrix.target}}/files" 2>/dev/null)" ]; then
          if [ -d "files" ]; then
            cp -rf "${GITHUB_WORKSPACE}/build/${{matrix.target}}/files/"* files/
            chmod -R 755 files
          else
            cp -rf "${GITHUB_WORKSPACE}/build/${{matrix.target}}/files" .
            chmod -R 755 files
          fi
        fi

        # 写入配置文件
        if [ -f "${GITHUB_WORKSPACE}/build/${{matrix.target}}/$CONFIG_FILE" ]; then
          cp "${GITHUB_WORKSPACE}/build/${{matrix.target}}/$CONFIG_FILE" .config
        else
          echo "警告: 未找到配置文件 ${GITHUB_WORKSPACE}/build/${{matrix.target}}/$CONFIG_FILE"
          touch .config
        fi

        make defconfig

    - name: SSH远程连接服务器
      uses: mxschmitt/action-tmate@v3
      if: env.SSH_ACTIONS == 'true' || github.event.inputs.SSH_ACTION == 'true'
      with:
        limit-access-to-actor: true

    - name: 输出编译信息
      run: |
        cd /github-builder/openwrt
        echo "系统空间信息:"
        df -hT $PWD
        echo "=========================================="
        echo "CPU信息:"
        echo "物理CPU数量: $(grep "physical id" /proc/cpuinfo | sort | uniq | wc -l)"
        echo "CPU核心及版本信息: $(grep "model name" /proc/cpuinfo | head -1 | cut -f2 -d:)"
        echo "=========================================="
        # 检查编译版本信息
        if [ -f "package/lean/default-settings/files/zzz-default-settings" ]; then
          echo "当前编译版本：$(grep "DISTRIB_REVISION" package/lean/default-settings/files/zzz-default-settings | cut -d= -f2 | tr -d \')"
        fi
        # 获取内核版本
        if [ -f "target/linux/x86/Makefile" ]; then
          KERNEL_PATCHVER=$(grep "KERNEL_PATCHVER" target/linux/x86/Makefile | cut -d= -f2 | tr -d ' ')
          echo "KERNEL_PATCHVER=$KERNEL_PATCHVER" >> $GITHUB_ENV
          echo "内核版本：$KERNEL_PATCHVER"
        fi
        echo "源码分支：$REPO_BRANCH"
        echo "编译时间：$FILE_TIME1"
        echo "=========================================="
        # 显示已选插件列表
        echo "已选插件列表:"
        if [ -f ".config" ]; then
          grep -i "CONFIG_PACKAGE_luci-app" .config | grep -v \# | head -20 | awk '{print "  " NR ". " $0}'
          echo "（显示前20个插件）"
        fi
        echo "=========================================="

    - name: 下载编译所需文件
      run: |
        cd /github-builder/openwrt
        make download -j$(nproc) || make download -j1 V=s

    - name: 开始编译固件
      id: compile
      run: |
        cd /github-builder/openwrt
        make -j$(nproc) V=s 2>&1 | tee build.log || (echo "编译失败，查看详细日志..." && tail -n 100 build.log && exit 1)

    - name: 检查空间使用情况
      if: always()
      run: |
        echo "======================="
        echo "空间使用情况:"
        echo "======================="
        df -hT
        echo "======================="
        du -h --max-depth=1 /github-builder/openwrt/ --exclude=build_dir --exclude=bin || true
        echo "======================="

    - name: 详细错误诊断
      if: failure()
      run: |
        cd /github-builder/openwrt
        echo "=== 详细错误诊断 ==="
        echo "1. 检查编译日志中的错误:"
        grep -i "error\|failed\|warning" build.log | tail -n 20 || true
        echo ""
        echo "2. 检查包冲突:"
        grep -E "CONFLICT\|冲突" build.log | tail -n 10 || true
        echo ""
        echo "3. 检查缺失的依赖:"
        grep -i "missing\|依赖\|depends" build.log | tail -n 10 || true

    - name: 整理固件文件
      if: success()
      id: organizer
      run: |
        mkdir -p ${GITHUB_WORKSPACE}/artifact/firmware
        mkdir -p ${GITHUB_WORKSPACE}/artifact/buildinfo
        # 复制配置文件
        cp -f /github-builder/openwrt/.config ${GITHUB_WORKSPACE}/artifact/buildinfo/${{matrix.target}}.config || true
        # 复制buildinfo和manifest文件
        cp -f $(find /github-builder/openwrt/bin/targets/ -name "*.buildinfo" -o -name "*.manifest") ${GITHUB_WORKSPACE}/artifact/buildinfo/ 2>/dev/null || true
        # 复制固件文件
        cp -f $(find /github-builder/openwrt/bin/targets/ -name "*.img.gz" -o -name "*.bin") ${GITHUB_WORKSPACE}/artifact/firmware/ 2>/dev/null || true
        # 计算编译时间
        START_SECONDS=${{ env.START_SECONDS }}
        END_TIME=`date +'%Y-%m-%d %H:%M:%S'`
        END_SECONDS=$(date --date="$END_TIME" +%s)
        SECONDS=$((END_SECONDS-START_SECONDS))
        HOUR=$((SECONDS/3600))
        MIN=$(( (SECONDS-HOUR*3600)/60 ))
        SEC=$((SECONDS-HOUR*3600-MIN*60))
        echo "BUILD_TIME=${HOUR}时${MIN}分${SEC}秒" >> $GITHUB_ENV
        echo "编译用时: ${HOUR}时${MIN}分${SEC}秒"

    - name: 上传固件文件
      if: steps.compile.outcome == 'success' && env.UPLOAD_FIRMWARE == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: ${{matrix.target}}_OpenWrt_firmware_${{ env.FILE_TIME }}
        path: ${GITHUB_WORKSPACE}/artifact/firmware/*

    - name: 上传编译日志
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: build_log_${{ github.run_id }}
        path: /github-builder/openwrt/build.log

    - name: 上传固件信息
      if: steps.compile.outcome == 'success' && env.UPLOAD_CONFIG == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: ${{matrix.target}}_OpenWrt_buildinfo_${{ env.FILE_TIME }}
        path: ${GITHUB_WORKSPACE}/artifact/buildinfo/*

    - name: 自动发布固件到 Releases
      uses: softprops/action-gh-release@v1
      if: steps.compile.outcome == 'success' && env.UPLOAD_RELEASE == 'true'
      with:
        name: ${{ env.FILE_TIME1 }} 「 ${{ env.FIRMWARE_MESSAGE }} 」
        tag: ${{ env.FILE_TIME2 }}-${{matrix.target}}
        token: ${{ secrets.MY_GITHUB_TOKEN }}
        body: |
          ★ 源码: ${{ env.REPO_URL }}
          ★ 分支: ${{ env.REPO_BRANCH }}
          ★ 感谢源码作者无私分享！

          🖥 内核版本: ${{ env.KERNEL_PATCHVER }}

          🎈 编译时间: ${{ env.FILE_TIME1 }}

          ⏰ 编译用时: ${{ env.BUILD_TIME }}

          🎉 [ ${{ env.FIRMWARE_MESSAGE }} ]固件下载

          ━━━━━━━━━━━━━━━━━━━━

          =========================================
        files: ${GITHUB_WORKSPACE}/artifact/firmware/*

    - name: 删除运行记录
      if: success()
      uses: Mattraks/delete-workflow-runs@v2
      with:
        token: ${{ secrets.MY_GITHUB_TOKEN }}
        repository: ${{ github.repository }}
        retain_days: 30
        keep_minimum_runs: 5

    - name: 删除自动发布的旧固件
      if: steps.compile.outcome == 'success' && env.UPLOAD_RELEASE == 'true'
      uses: dev-drprasad/delete-older-releases@v0.2.0
      with:
        keep_latest: 10
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}

    - name: 编译成功信息通知-Telegram
      if: steps.compile.outcome == 'success' && env.TELEGRAM_BOT == 'true'
      run: |
        curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
          -d chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" \
          -d text="您的${{ env.FIRMWARE_MESSAGE }}固件成功编译完成了！

        🖥 内核版本: ${{ env.KERNEL_PATCHVER }}
        🎈 编译时间: ${{ env.FILE_TIME1 }}
        ⏰ 编译用时: ${{ env.BUILD_TIME }}
        🎉 发布地址: ${{ env.GITHUB_RELEASE }}

        🌴 固件已经编译完成 🎈！！！" \
          >/dev/null 2>&1 && echo "Telegram通知发送成功"
