name: OpenWrt Builder

on:
  workflow_dispatch:
    inputs:
      CACHE_BUILD:
        description: '启用编译缓存'
        type: boolean
        default: true
      SSH_ACTION:
        description: 'SSH远程配置固件'
        type: boolean
        default: false
      CLEAN_CACHE:
        description: '清理缓存'
        type: boolean
        default: false
  schedule:
    - cron: '0 15 * * 3'  # 每周三下午3点(UTC时间)，北京时间晚上11点

env:
  TZ: Asia/Shanghai
  MY_GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}
  TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
  TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
  GITHUB_RELEASE: https://github.com/aoxijy/aoxi-openwrt/releases
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: .config
  DIY_P_SH: diy-part.sh

jobs:
  build:
    runs-on: ubuntu-22.04
    steps:
    - name: Checkout 仓库
      uses: actions/checkout@v4

    - name: 检测脚本设置
      run: |
        echo "检查必要的文件..."
        if [ ! -f "$CONFIG_FILE" ]; then
          echo "错误: $CONFIG_FILE 不存在!"
          exit 1
        fi
        if [ ! -f "$DIY_P_SH" ]; then
          echo "警告: $DIY_P_SH 不存在，将继续使用默认配置"
        fi
        echo "所有必要文件检查完成"

    - name: 清理编译缓存（如需要）
      if: inputs.CLEAN_CACHE
      run: |
        echo "清理编译缓存..."
        sudo rm -rf ./tmp
        sudo rm -rf ./*.config
        echo "缓存清理完成"

    - name: 初始化系统环境
      run: |
        echo "安装编译依赖..."
        sudo apt-get update
        sudo apt-get install -y build-essential clang flex bison g++ gawk gcc-multilib g++-multilib \
          gettext git libncurses5-dev libssl-dev python3-distutils rsync unzip zlib1g-dev \
          file wget qemu-utils

    - name: 编译前准备
      run: |
        echo "设置Git配置..."
        git config --global user.name "OpenWrt Builder"
        git config --global user.email "builder@openwrt.org"
        echo "准备编译环境..."

    - name: 释放Ubuntu磁盘空间
      run: |
        echo "释放磁盘空间..."
        sudo rm -rf /usr/local/lib/android
        sudo rm -rf /opt/ghc
        sudo rm -rf /usr/local/share/boost
        sudo apt-get clean

    - name: 创建模拟物理磁盘
      run: |
        echo "创建虚拟磁盘..."
        dd if=/dev/zero of=swapfile bs=1M count=2048
        mkswap swapfile
        swapon swapfile
        free -h

    - name: 下载Lean_x86_64源码
      run: |
        echo "克隆源码仓库..."
        git clone $REPO_URL openwrt --branch $REPO_BRANCH --depth 1
        cd openwrt

    - name: 缓存加速
      if: inputs.CACHE_BUILD
      uses: actions/cache@v3
      with:
        path: openwrt/dl
        key: ${{ runner.os }}-openwrt-dl-${{ hashFiles('openwrt/feeds.conf.default') }}
        restore-keys: |
          ${{ runner.os }}-openwrt-dl-

    - name: 更新时区、编译时间
      run: |
        echo "设置时区..."
        sudo timedatectl set-timezone $TZ
        echo "当前时间: $(date)"

    - name: 加载源,定制文件并生成自定义配置
      run: |
        cd openwrt
        echo "更新和安装feeds..."
        ./scripts/feeds update -a
        ./scripts/feeds install -a
        
        if [ -f "../$DIY_P_SH" ]; then
          echo "运行自定义脚本..."
          chmod +x "../$DIY_P_SH"
          "../$DIY_P_SH"
        fi
        
        echo "应用配置文件..."
        cp "../$CONFIG_FILE" .config
        make defconfig

    - name: SSH远程连接服务器
      if: inputs.SSH_ACTION
      uses: mxschmitt/action-tmate@v3
      with:
        limit-access-to: ${{ github.actor }}

    - name: 输出编译信息
      run: |
        cd openwrt
        echo "编译信息:"
        echo "=========================================="
        make -s info
        echo "=========================================="

    - name: 下载编译所需文件
      run: |
        cd openwrt
        echo "下载依赖文件..."
        make download -j$(nproc)
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -delete

    - name: 开始编译固件
      run: |
        cd openwrt
        echo "开始编译..."
        make -j$(($(nproc) + 1)) V=s 2>&1 | tee build.log | grep -E '^(CC|CXX|LD|INSTALL|make)'

    - name: 检查空间使用情况
      run: |
        echo "磁盘使用情况:"
        df -h
        echo "编译目录大小:"
        du -sh openwrt

    - name: 整理固件文件
      run: |
        echo "整理固件文件..."
        cd openwrt/bin/targets/*/*
        mkdir -p firmware
        mv * firmware/ 2>/dev/null || true
        echo "固件文件列表:"
        ls -la firmware/

    - name: 上传固件文件
      uses: actions/upload-artifact@v4
      with:
        name: openwrt-firmware
        path: openwrt/bin/targets/*/*/firmware/*
        retention-days: 5

    - name: 上传固件信息
      uses: actions/upload-artifact@v4
      with:
        name: build-info
        path: |
          openwrt/build.log
          openwrt/.config
        retention-days: 5

    - name: 自动发布固件到 Releases
      if: success()
      env:
        GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}
      run: |
        echo "准备发布固件..."
        cd openwrt/bin/targets/*/*/firmware
        TAG_NAME="openwrt-$(date +'%Y%m%d-%H%M')"
        
        # 创建发布
        RELEASE_RESPONSE=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
          -d '{"tag_name":"'"$TAG_NAME"'","name":"OpenWrt Build '"$(date +'%Y-%m-%d %H:%M')"'","draft":false,"prerelease":false}' \
          "https://api.github.com/repos/${{ github.repository }}/releases")
        
        RELEASE_ID=$(echo "$RELEASE_RESPONSE" | grep '"id":' | head -1 | awk '{print $2}' | sed 's/[^0-9]*//g')
        
        # 上传固件文件
        for file in *; do
          if [ -f "$file" ]; then
            echo "上传文件: $file"
            curl -H "Authorization: token $GITHUB_TOKEN" \
              -H "Content-Type: application/octet-stream" \
              --data-binary @"$file" \
              "https://uploads.github.com/repos/${{ github.repository }}/releases/$RELEASE_ID/assets?name=$file"
          fi
        done

    - name: 删除运行记录
      if: always()
      run: |
        echo "清理敏感信息..."
        history -c

    - name: 删除自动发布的旧固件（大于20个删除前面的）
      if: success()
      env:
        GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}
      run: |
        echo "检查并清理旧发布..."
        RELEASES=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
          "https://api.github.com/repos/${{ github.repository }}/releases?per_page=100" | \
          jq -r '.[] | select(.name | contains("OpenWrt Build")) | .id' | head -n 20)
        
        ALL_RELEASES=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
          "https://api.github.com/repos/${{ github.repository }}/releases?per_page=100" | \
          jq -r '.[] | select(.name | contains("OpenWrt Build")) | .id')
        
        COUNT=0
        for release in $ALL_RELEASES; do
          COUNT=$((COUNT+1))
          if [ $COUNT -gt 20 ]; then
            echo "删除旧发布: $release"
            curl -s -X DELETE -H "Authorization: token $GITHUB_TOKEN" \
              "https://api.github.com/repos/${{ github.repository }}/releases/$release"
          fi
        done

    - name: 编译成功信息通知-Telegram
      if: success()
      run: |
        echo "发送Telegram通知..."
        BUILD_TIME=$(date +'%Y-%m-%d %H:%M:%S')
        MESSAGE="✅ OpenWrt编译成功！%0A%0A📅 编译时间: $BUILD_TIME%0A📦 仓库: ${{ github.repository }}%0A🔖 版本: $(cd openwrt && git log -1 --pretty=format:'%h')%0A%0A下载地址: $GITHUB_RELEASE"
        
        curl -s -X POST "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage" \
          -d chat_id="$TELEGRAM_CHAT_ID" \
          -d text="$MESSAGE" \
          -d parse_mode="HTML"

    - name: 编译失败信息通知-Telegram
      if: failure()
      run: |
        echo "发送Telegram失败通知..."
        BUILD_TIME=$(date +'%Y-%m-%d %H:%M:%S')
        MESSAGE="❌ OpenWrt编译失败！%0A%0A📅 编译时间: $BUILD_TIME%0A📦 仓库: ${{ github.repository }}%0A%0A请检查编译日志获取详细信息。"
        
        curl -s -X POST "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage" \
          -d chat_id="$TELEGRAM_CHAT_ID" \
          -d text="$MESSAGE" \
          -d parse_mode="HTML"
